{"version":3,"file":"static/js/878.f46ea662.chunk.js","mappings":"kTAEaA,EAAOC,EAAAA,EAAAA,GAAH,0GAMJC,EAAOD,EAAAA,EAAAA,GAAH,kJAOJE,EAAOF,EAAAA,EAAAA,EAAH,kFAKJG,EAAYH,EAAAA,EAAAA,EAAH,6E,mBCZTI,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,EAA2B,KAAb,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMG,QAChBC,EAAoB,OAATJ,EAEXK,GAAiBC,EAAAA,EAAAA,cAAW,iBAAC,oGACVC,EAAAA,EAAAA,KAASV,GADC,OAC3BW,EAD2B,OAEjCP,EAAQO,GAFyB,2CAGhC,CAACX,IAOJ,OAJAY,EAAAA,EAAAA,YAAU,WACRJ,GACD,GAAE,CAACA,KAGF,UAACd,EAAD,YACIa,IAAY,SAAC,IAAD,uFACbA,GAAYF,IACX,SAACT,EAAD,gQAEDW,IACEF,GACDF,EAAKU,MAAM,EAAG,IAAIC,KAAI,SAACX,GAAD,OACpB,UAACP,EAAD,WACGO,EAAKY,cACJ,gBAAKC,IAAG,UAjBD,mCAiBC,OAAkBb,EAAKY,cAAgBE,IAAKd,EAAKe,QAEzD,gBAAKF,IAAG,U,mtFAAwBC,IAAKd,EAAKe,QAG5C,4BACE,SAACrB,EAAD,UAAOM,EAAKe,QACZ,SAACpB,EAAD,UAAYK,EAAKgB,iBATVhB,EAAKiB,GADI,MAgB7B,EACD,G,kEC/CAC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAO,mCAAG,oGACSF,EAAAA,EAAAA,IAAU,uBAAwB,CACvDG,OAAQ,CACNC,QAASH,EACTI,SAAU,QAJA,cACRf,EADQ,yBAOPA,EAASgB,KAAKC,SAPP,2CAAH,qDAUPC,EAAM,mCAAG,WAAOC,GAAP,uFACUT,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNC,QAASH,EACTQ,MAAOA,KAJE,cACPnB,EADO,yBAONA,EAASgB,KAAKC,SAPR,2CAAH,sDAUNG,EAAO,mCAAG,WAAOX,GAAP,uFACSC,EAAAA,EAAAA,IAAU,UAAYD,EAAI,CAC/CI,OAAQ,CACNC,QAASH,EACTI,SAAU,QAJA,cACRf,EADQ,yBAOPA,EAASgB,MAPF,2CAAH,sDAUPxB,EAAI,mCAAG,WAAOiB,GAAP,uFACYC,EAAAA,EAAAA,IAAU,UAAYD,EAAK,WAAY,CAC5DI,OAAQ,CACNC,QAASH,KAHF,cACLX,EADK,yBAMJA,EAASgB,KAAKxB,MANV,2CAAH,sDASJ6B,EAAO,mCAAG,WAAOZ,GAAP,uFACSC,EAAAA,EAAAA,IAAU,UAAYD,EAAK,WAAY,CAC5DI,OAAQ,CACNC,QAASH,KAHC,cACRX,EADQ,yBAMPA,EAASgB,KAAKC,SANP,2CAAH,sDASPlB,EAAM,CACVa,QAAAA,EACAM,OAAAA,EACAE,QAAAA,EACA5B,KAAAA,EACA6B,QAAAA,GAGF,K","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/API.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  display: block;\n  list-style: none;\n  margin: 20px auto;\n  padding: 0 20px;\n`;\nexport const Item = styled.li`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px 0px;\n  display: flex;\n  font-size: 24px;\n  gap: 20px;\n  margin: 10px 0;\n`;\nexport const Name = styled.p`\n  margin: 0;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\nexport const Character = styled.p`\n  margin: 0;\n  font-size: 16px;\n  color: #a6a6a6;\n`;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport API from \"../../services/API\";\nimport { Item, List, Name, Character } from \"./Cast.styled\";\nimport { Fallback } from \"../Fallback/Fallback.styled\";\nimport castplaceholder from \"../../images/cast-placeholder.jpg\";\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const isEmpty = cast?.length === 0;\n  const isLoaded = cast !== null;\n\n  const hadleFetchCast = useCallback(async () => {\n    const response = await API.cast(movieId);\n    setCast(response);\n  }, [movieId]);\n  const imgBaseUrl = \"https://image.tmdb.org/t/p/w45/\";\n\n  useEffect(() => {\n    hadleFetchCast();\n  }, [hadleFetchCast]);\n\n  return (\n    <List>\n      {!isLoaded && <Fallback>Завантаження</Fallback>}\n      {isLoaded && isEmpty && (\n        <Item>На жаль, інформації про акторський склад немає</Item>\n      )}\n      {isLoaded &&\n        !isEmpty &&\n        cast.slice(0, 10).map((cast) => (\n          <Item key={cast.id}>\n            {cast.profile_path ? (\n              <img src={`${imgBaseUrl}${cast.profile_path}`} alt={cast.name} />\n            ) : (\n              <img src={`${castplaceholder}`} alt={cast.name} />\n            )}\n\n            <div>\n              <Name>{cast.name}</Name>\n              <Character>{cast.character}</Character>\n            </div>\n          </Item>\n        ))}\n    </List>\n  );\n};\nexport default Cast;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"82d7358e08c3385257d89a8036361557\";\n\nconst popular = async () => {\n  const response = await axios.get(\"/trending/movie/week\", {\n    params: {\n      api_key: API_KEY,\n      language: \"uk\",\n    },\n  });\n  return response.data.results;\n};\n\nconst search = async (query) => {\n  const response = await axios.get(\"/search/movie\", {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n  return response.data.results;\n};\n\nconst details = async (id) => {\n  const response = await axios.get(\"/movie/\" + id, {\n    params: {\n      api_key: API_KEY,\n      language: \"uk\",\n    },\n  });\n  return response.data;\n};\n\nconst cast = async (id) => {\n  const response = await axios.get(\"/movie/\" + id + \"/credits\", {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n};\n\nconst reviews = async (id) => {\n  const response = await axios.get(\"/movie/\" + id + \"/reviews\", {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nconst API = {\n  popular,\n  search,\n  details,\n  cast,\n  reviews,\n};\n\nexport default API;\n"],"names":["List","styled","Item","Name","Character","Cast","movieId","useParams","useState","cast","setCast","isEmpty","length","isLoaded","hadleFetchCast","useCallback","API","response","useEffect","slice","map","profile_path","src","alt","name","character","id","axios","API_KEY","popular","params","api_key","language","data","results","search","query","details","reviews"],"sourceRoot":""}